const express=require("express"),path=require("path"),mongoose=require("mongoose"),bodyParser=require("body-parser"),cors=require("cors");require("dotenv").config();const os=require("os"),app=express(),PORT=process.env.PORT||3e3,validator=require("validator"),sanitizeHtml=require("sanitize-html");mongoose.connect(process.env.MONGODB_URI,{}).then(()=>{console.log("MongoDB connected successfully")}).catch(e=>{console.error("MongoDB connection error:",e)});const userSchema=new mongoose.Schema({uid:{type:String,required:!0,unique:!0},password:{type:String,required:!0},overallMood:{type:String,default:"neutral"},lastMoodDate:{type:Date},moodStreak:{type:Number,default:0},circleCode:{type:String,default:""},moodCounts:{happy:{type:Number,default:0},sad:{type:Number,default:0},angry:{type:Number,default:0},neutral:{type:Number,default:0},crying:{type:Number,default:0},regret:{type:Number,default:0},anxious:{type:Number,default:0},excited:{type:Number,default:0},calm:{type:Number,default:0},stressed:{type:Number,default:0},hopeful:{type:Number,default:0},lonely:{type:Number,default:0},frustrated:{type:Number,default:0},grateful:{type:Number,default:0},confused:{type:Number,default:0}},createdAt:{type:Date,default:Date.now},updatedAt:{type:Date,default:Date.now}}),moodSchema=new mongoose.Schema({uid:{type:String,required:!0},mood:{type:String,required:!0},note:{type:String,default:""},shared:{type:Boolean,default:!1},circleCode:{type:String,default:""},createdAt:{type:Date,default:Date.now},moodIntensity:{type:Number,min:1,max:5,default:3},reactionCounts:{support:{type:Number,default:0},empathy:{type:Number,default:0}}}),circleSchema=new mongoose.Schema({code:{type:String,unique:!0,required:!0},name:{type:String,required:!0},createdBy:{type:String,required:!0},members:[{type:String,required:!0}],createdAt:{type:Date,default:Date.now}}),User=mongoose.model("User",userSchema),Mood=mongoose.model("Mood",moodSchema),Circle=mongoose.model("Circle",circleSchema);function generateUID(){let e="ABCDEFGHJKLMNPQRSTUVWXYZ23456789",t="";for(let r=0;r<6;r++)t+=e.charAt(Math.floor(Math.random()*e.length));return t}function getLocalIPAddress(){let e=os.networkInterfaces();for(let t in e)for(let r of e[t])if("IPv4"===r.family&&!r.internal)return r.address;return"localhost"}app.use(cors()),app.use(bodyParser.json()),app.post("/api/signup",async(e,t)=>{try{let{password:r,uid:o}=e.body;if(!r||r.length<3)return t.status(400).json({error:"Password must be at least 3 characters"});if(!o)return t.status(400).json({error:"UID is required"});if(o=validator.escape(o.trim()),r=validator.escape(r.trim()),!validator.isAlphanumeric(o))return t.status(400).json({error:"UID must be alphanumeric"});let a=await User.findOne({uid:o});if(a)return t.status(400).json({error:"UID already taken. Please reload the page and try again"});let s=new User({uid:o,password:r});await s.save(),t.json({uid:o})}catch(n){console.error(n),t.status(500).json({error:"Server error"})}}),app.post("/api/login",async(e,t)=>{try{let{uid:r,password:o}=e.body;if(!r||!o)return t.status(400).json({error:"UID and password required"});r=validator.escape(validator.trim(r)),o=validator.escape(o);let a=await User.findOne({uid:r});if(!a||a.password!==o)return t.status(401).json({error:"Invalid UID or password"});t.json({success:!0})}catch(s){t.status(500).json({error:"Server error"})}}),app.post("/api/mood",async(e,t)=>{try{let{uid:r,mood:o,note:a="",shared:s=!1,moodIntensity:n}=e.body;if(!r||!o)return t.status(400).json({error:"UID and mood are required"});r=validator.trim(validator.escape(r)),o=validator.trim(validator.escape(o));let i=["happy","sad","angry","neutral","crying","regret","anxious","excited","calm","stressed","hopeful","lonely","frustrated","grateful","confused"];if(!i.includes(o))return t.status(400).json({error:"Invalid mood value"});let d=Number(n);if(!d||d<1||d>5)return t.status(400).json({error:"Mood intensity must be a number between 1 and 5"});let l=sanitizeHtml(a,{allowedTags:[],allowedAttributes:{}});s=!0===s||"true"===s;let u=new Mood({uid:r,mood:o,note:l,shared:s,moodIntensity:d});await u.save();let c=await User.findOne({uid:r});if(!c)return t.status(404).json({error:"User not found"});c.moodCounts[o]=(c.moodCounts[o]||0)+1,c.overallMood=o;let p=new Date;if(c.lastMoodDate){let $=new Date;$.setDate($.getDate()-1);let m=new Date(c.lastMoodDate);m.setHours(0,0,0,0);let y=m.getTime()===$.setHours(0,0,0,0);c.moodStreak=y?c.moodStreak+1:1}else c.moodStreak=1;c.lastMoodDate=p,c.updatedAt=p,await c.save(),t.json({success:!0})}catch(f){console.error("Error in /api/mood:",f),t.status(500).json({error:"Server error"})}}),app.get("/api/moods",async(e,t)=>{try{let{uid:r}=e.query;if(!r)return t.status(400).json({error:"UID required"});let o=await Mood.find({uid:r}).sort({createdAt:-1}).limit(20);t.json({moods:o})}catch(a){t.status(500).json({error:"Server error"})}}),app.get("/api/uid",async(e,t)=>{try{let r,o;do o=await User.findOne({uid:r=generateUID()});while(o);t.json({uid:r})}catch(a){t.status(500).json({error:"Server error"})}}),app.get("/api/mood-summary",async(e,t)=>{let r=e.query.uid;if(!r)return t.status(400).json({error:"Missing uid"});try{let o=await Mood.find({uid:r}),a=new Date,s={},n=0;o.forEach(e=>{let t=(a-new Date(e.createdAt))/864e5,r=Math.exp(-t/30),o=(e.moodIntensity||3)/5,i=r*o;s[e.mood]=(s[e.mood]||0)+i,n+=i});let i="neutral",d=0;for(let[l,u]of Object.entries(s))u>d&&(d=u,i=l);let c={};for(let p in s)c[p]=Math.round(100*s[p])/100;t.json({overallMood:i,totalMoods:Math.round(10*n)/10,moodCounts:c})}catch($){console.error($),t.status(500).json({error:"Server error"})}}),app.get("/api/feed",async(e,t)=>{try{let r=await Mood.find({shared:!0}).sort({createdAt:-1}).limit(50).lean();t.json({feed:r.map(e=>({uid:e.uid,mood:e.mood,note:e.note,moodIntensity:e.moodIntensity,createdAt:e.createdAt}))})}catch(o){console.error("Error fetching feed:",o),t.status(500).json({error:"Server error"})}}),app.post("/api/create-circle",async(e,t)=>{let{uid:r,name:o}=e.body,a=Math.random().toString(36).substr(2,8).toUpperCase();try{await Circle.create({code:a,name:o,createdBy:r,members:[r]}),await User.updateOne({uid:r},{circleCode:a}),t.json({message:"Circle created",code:a})}catch(s){console.error(s),t.status(500).json({error:"Could not create circle"})}}),app.post("/api/join-circle",async(e,t)=>{let{uid:r,code:o}=e.body,a=await Circle.findOne({code:o});return a?a.members.includes(r)?t.json({message:"Already in circle",code:o}):void(a.members.push(r),await a.save(),await User.updateOne({uid:r},{circleCode:o}),t.json({message:"Joined circle",code:o})):t.status(404).json({error:"Circle not found"})}),app.get("/api/circle-feed",async(e,t)=>{let{uid:r}=e.query;if(!r)return t.status(400).json({error:"UID is required"});try{let o=await User.findOne({uid:r});if(!o||!o.circleCode)return t.json({feed:[]});let a=await Circle.findOne({code:o.circleCode});if(!a)return t.json({feed:[]});let s=await Mood.find({uid:{$in:a.members}}).sort({createdAt:-1});t.json({feed:s})}catch(n){console.error(n),t.status(500).json({error:"Server error"})}}),app.post("/api/circle-leave",async(e,t)=>{let{uid:r}=e.body;try{let o=await User.findOne({uid:r});if(!o.circleCode)return t.json({message:"Not in a circle"});await Circle.updateOne({code:o.circleCode},{$pull:{members:r}}),await User.updateOne({uid:r},{circleCode:null}),t.json({message:"Left the circle"})}catch(a){t.status(500).json({error:"Server error"})}}),app.get("/api/user",async(e,t)=>{let{uid:r}=e.query;if(!r)return t.status(400).json({error:"UID is required"});try{let o=await User.findOne({uid:r});if(!o)return t.status(404).json({error:"User not found"});t.json({uid:o.uid,circleCode:o.circleCode||null})}catch(a){console.error("Error fetching user:",a),t.status(500).json({error:"Server error"})}}),app.get("/",(e,t)=>t.sendFile(path.join(__dirname,"public","mymood.html"))),app.get("/signup",(e,t)=>t.sendFile(path.join(__dirname,"public","signup.html"))),app.get("/login",(e,t)=>t.sendFile(path.join(__dirname,"public","login.html"))),app.get("/global",(e,t)=>t.sendFile(path.join(__dirname,"public","index.html"))),app.get("/circle",(e,t)=>t.sendFile(path.join(__dirname,"public","circle.html"))),app.get("/mymood",(e,t)=>t.sendFile(path.join(__dirname,"public","mymood.html"))),app.use(express.static(path.join(__dirname,"public"))),app.listen(PORT,()=>{let e=getLocalIPAddress();console.log("Server running on:"),console.log(`→ Local:   http://localhost:${PORT}`),console.log(`→ Network: http://${e}:${PORT}`)});